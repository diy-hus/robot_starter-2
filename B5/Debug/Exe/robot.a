;unsigned char Code_tay_cam1 = 0xB5;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include "define.c"
;#define servo_1 PORTB.1
;#define servo_2 PORTB.2
;#define servo_3 PORTB.4
;#define servo_4 PORTD.0
;#define servo_5 PORTD.1
;#define servo_6 PORTD.2
;#define servo_7 PORTD.3
;#define servo_8 PORTD.6
;
;//---------------------
;#define laser    PORTA.2
;#define led    PORTA.3
;
;#define PWM_1 OCR1A
;#define DIR_1 PORTA.4
;//--------------------
;#define PWM_2 OCR1B
;#define DIR_2 PORTA.5
;//-------------------
;#define CE PORTC.2
;#define CSN PORTC.6
;#define SCK PORTC.1
;#define MOSI PORTC.7
;#define MISO PINC.0
;#define IRQ PINA.7
;
;
;
;
;
;
;#include "init.c"
;unsigned char dem=0, dem1=0;
;unsigned char steering,RC2,RC3,RC4,RC5,RC6,RC7,RC8;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;TCNT0=0x9C;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;dem++;
;PCODE: $00000011 VOL: 0
;if(dem==200){dem=0;}
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;if(dem<steering){servo_1=1;}else{servo_1=0;}
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;if(dem1<RC6){servo_6=1;}else{servo_6=0;}
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;}
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
;{
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;TCNT2=0x9C;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;dem1++;
;PCODE: $00000032 VOL: 0
;if(dem1==200){dem1=0;}
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;if(dem<RC2){servo_2=1;}else{servo_2=0;}
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;if(dem<RC3){servo_3=1;}else{servo_3=0;}
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;if(dem<RC4){servo_4=1;}else{servo_4=0;}
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;if(dem1<RC5){servo_5=1;}else{servo_5=0;}
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;if(dem1<RC7){servo_7=1;}else{servo_7=0;}
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;if(dem1<RC8){servo_8=1;}else{servo_8=0;}
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;}
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;
;
;void init(void)
;{
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;DDRA=(0<<DDA7) | (0<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PORTA=(1<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;
;DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;DDRC=(1<<DDC7) | (1<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (0<<DDC0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PORTC=(1<<PORTC7) | (1<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;
;DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;// Timer Period: 0.1 ms
;TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;TCNT0=0x9C;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;OCR0=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;// Timer Period: 4.096 ms
;
;TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;TCNT1H=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;TCNT1L=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;ICR1H=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;ICR1L=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;OCR1AH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;OCR1AL=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;OCR1BH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;OCR1BL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;// Timer Period: 0.1 ms
;ASSR=0<<AS2;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;TCNT2=0x9C;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;OCR2=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;
;// Timer(s)/Counter(s) Interrupt(s) initialization
;TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;MCUCSR=(0<<ISC2);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;
;ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;SFIOR=(0<<ACME);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;
;SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;
;
;TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;
;#asm("sei")
;PCODE: $000000BB VOL: 0
	sei
;PCODE: $000000BC VOL: 0
;}
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;#include "dong_co.c"
;void control_motor(unsigned char motor,unsigned char dir_motor,unsigned char speed){
; 0000 0008 void control_motor(unsigned char motor,unsigned char dir_motor,unsigned char speed){
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;    switch (motor){
;PCODE: $000000C1 VOL: 0
;	motor -> Y+2
;	dir_motor -> Y+1
;	speed -> Y+0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;        case 1:{
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;            if(dir_motor==0){
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;                DIR_1 = dir_motor;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;                PWM_1 = speed;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;                break;
;PCODE: $000000D6 VOL: 0
;            }
;            else {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;                DIR_1 = dir_motor;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;                PWM_1 = 255 - speed;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;                break;
;PCODE: $000000E9 VOL: 0
;            }
;PCODE: $000000EA VOL: 0
;        }
;        case 2:{
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;            if(dir_motor==0){
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;                DIR_2 = dir_motor;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;                PWM_2 = speed;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;                break;
;PCODE: $00000100 VOL: 0
;            }
;            else{
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;                DIR_2 = dir_motor;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;                PWM_2 = 255 - speed;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;                break;
;PCODE: $00000113 VOL: 0
;            }
;PCODE: $00000114 VOL: 0
;        }
;    }
;PCODE: $00000115 VOL: 0
;}
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;void dung_yen(){
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;    control_motor(1,0,0);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;    control_motor(2,0,0);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;}
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;
;void di_lui(int speed){
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;    control_motor(1,1,255-speed);
;PCODE: $0000012B VOL: 0
;	speed -> Y+0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;    control_motor(2,1,255-speed);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;}
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;
;void di_thang(int speed){
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;    control_motor(1,0,speed);
;PCODE: $00000143 VOL: 0
;	speed -> Y+0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;    control_motor(2,0,speed);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;}
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;
;void start_servo()
;{
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;DDRB.2=1;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;DDRB.4=1;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;DDRD.0=1;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;DDRD.1=1;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;DDRD.2=1;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;DDRD.3=1;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;DDRD.6=1;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;}
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;void stop_servo()
;{
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;DDRB.2=0;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;DDRB.4=0;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;DDRD.0=0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;DDRD.1=0;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;DDRD.2=0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;DDRD.3=0;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;DDRD.6=0;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;}
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;
;void ban()
;{
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PORTD.2=1;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;RC6=16;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;delay_ms(600);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;RC6=7;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;}
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;#include "rf.c"
;//#define CE PORTD.4      //out 1
;//#define CSN PORTD.5      //out 1
;//#define SCK PORTD.3       //out 1
;//#define MOSI PORTD.6      //out 1
;//#define MISO PIND.2       //in p
;//#define IRQ PIND.7        //in p
;
;typedef struct
;{
;    int analog_l;
;    int analog_r;
;    int digital_l;
;    int digital_r;
;}data;
;
;data receive;
;
;//--------------*---------------
;unsigned char Code_tay_cam2 ;
;unsigned char Code_tay_cam3;
;unsigned char Code_tay_cam4;
;unsigned char SPI_RW(unsigned char Buff);                                       //Function used for text moving
;unsigned char SPI_Read(void);
;void RF_Init();                                                                 //Function allow to Initialize RF device
;void RF_Write(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a registe ...
;void RF_Command(unsigned char command);                                         //Function to write a command
;void RF_Write_Address(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4);   ...
;void RX_Mode();                                                          //Function to put nRF in RX mode
;void RF_Config();                                                               //Function to config the nRF
;void RF_RX_Read();                                                     //Function to read the data from RX FIFO
;void RF_Write2(unsigned char Reg_Add, unsigned char Value);
;void RF_Write3(unsigned char Reg_Add, unsigned char Value);
;
;
;
;unsigned char SPI_RW(unsigned char Buff)
; 0000 0009 {
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;    unsigned char bit_ctr;
;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;	Buff -> Y+1
;	bit_ctr -> R17
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;       {
;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;        delay_us(5);
;PCODE: $0000019A VOL: 0
;        Buff = (Buff << 1);           // shift next bit into MSB..
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;        SCK = 1;                      // Set SCK high..
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;        delay_us(5);
;PCODE: $000001A0 VOL: 0
;        Buff |= MISO;                 // capture current MISO bit
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;        SCK = 0;                      // ..then set SCK low again
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;       }
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;    return(Buff);                     // return read uchar
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;}
;PCODE: $000001B2 VOL: 0
;unsigned char SPI_Read(void)
;{   unsigned char Buff=0;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;    unsigned char bit_ctr;
;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;	Buff -> R17
;	bit_ctr -> R16
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;       {
;        delay_us(5);
;PCODE: $000001C2 VOL: 0
;        Buff = (Buff << 1);           // shift next bit into MSB..
;PCODE: $000001C3 VOL: 0
;        SCK = 1;                      // Set SCK high..
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;        delay_us(5);
;PCODE: $000001C6 VOL: 0
;        Buff |= MISO;                 // capture current MISO bit
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;        SCK = 0;                      // ..then set SCK low again
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;       }
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;    return(Buff);                     // return read uchar
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;}
;PCODE: $000001D5 VOL: 0
;void RF_Init()                                                    //Function allow to Initialize RF device
;{
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;    CE=1;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;    delay_us(700);
;PCODE: $000001DA VOL: 0
;    CE=0;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;    CSN=1;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;}
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;void RF_Write(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
;{
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;    CSN=0;
;PCODE: $000001E3 VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;    SPI_RW(0b00100000|Reg_Add);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;    SPI_RW(Value);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;    CSN=1;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;    delay_us(10);
;PCODE: $000001EE VOL: 0
;}
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;void RF_Write2(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
;{
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;    CSN=0;
;PCODE: $000001F4 VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;    SPI_RW(0b00100000|Reg_Add);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;    SPI_RW(Value);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;    SPI_RW(Value);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;    SPI_RW(Value);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;    SPI_RW(Value);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;    SPI_RW(Value);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;    CSN=1;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;    delay_us(10);
;PCODE: $00000207 VOL: 0
;}
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;void RF_Write3(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
;{
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;    CSN=0;
;PCODE: $0000020D VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;    SPI_RW(0b00100000|Reg_Add);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;    SPI_RW(0x48);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;    SPI_RW(0x48);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;    SPI_RW(0x48);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;    SPI_RW(0x48);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;    SPI_RW(Value);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;
;
;    CSN=1;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;    delay_us(10);
;PCODE: $00000220 VOL: 0
;}
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;void RF_Command(unsigned char command)                            //Function to write a command
;{
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;    CSN=0;
;PCODE: $00000226 VOL: 0
;	command -> Y+0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;    SPI_RW(command);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;    CSN=1;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;    delay_us(10);
;PCODE: $0000022D VOL: 0
;}
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;void RF_Write_Address(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4)    ...
;{
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;    CSN=0;
;PCODE: $00000233 VOL: 0
;	Address1 -> Y+3
;	Address2 -> Y+2
;	Address3 -> Y+1
;	Address4 -> Y+0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;    RF_Write(0x03,0b00000011);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;    CSN=1;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;    delay_us(10);
;PCODE: $0000023C VOL: 0
;    CSN=0;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;    RF_Write2(0x0A, Address1);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;    RF_Write2(0x10, Address1);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;
;    RF_Write3(0x0B, Address2);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;    RF_Write3(0x10, Address2);
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;
;    RF_Write3(0x0C, Address3);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;    RF_Write3(0x10, Address3);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;
;    RF_Write3(0x0D, Address4);
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;    RF_Write3(0x10, Address4);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;
;}
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;
;void RX_Mode()                                             //Function to put nRF in RX mode
;{
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;    RF_Write(0x00,0b00011111);     //CONFIG 0x00
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;    CE=1;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;}
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;
;void RF_Config()                                                  //Function to config the nRF
;{
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;RF_Command(0b11100010);     //Flush RX
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;
;delay_us(10);
;PCODE: $00000270 VOL: 0
;RF_Write(0x00,0b00011111);     //CONFIG 0x00
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;
;RF_Write(0x07,0b01111010);     //RF status
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;/*RF_Write(0x11,0b00100000);     //RX_PW_P0 0x11     Payload size
;RF_Write(0x12,0b00100000);
;RF_Write(0x13,0b00100000);
;RF_Write(0x14,0b00100000);*/
;RF_Write(0x1D, 0b00000100);
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;RF_Write(0x1C,0b00001111);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;RF_Write(0x05,0b00000010);
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;RF_Write_Address(Code_tay_cam1, Code_tay_cam2, Code_tay_cam3, Code_tay_cam4);
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;RF_Write(0x02,0b00001111);     //EX_RXADDR 0x02    enable data pipe 0;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;RF_Write(0x01,0b00001111);     //EN_AA 0x01        enable auto-acknowledgment
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;RF_Write(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;}
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;void RF_RX_Read()                                         //Function to read the data from RX FIFO
;{
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;   CE=0;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;   CSN=1;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;   delay_us(10);
;PCODE: $000002A0 VOL: 0
;   CSN=0;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;   SPI_RW(0b01100001);
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;   delay_us(10);
;PCODE: $000002A5 VOL: 0
;   receive.analog_l = SPI_Read();
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;   receive.analog_r = SPI_Read();
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;   receive.digital_l = SPI_Read();
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;   receive.digital_r = SPI_Read();
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;   CSN=1;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;   CE=1;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;   RF_Write(0x07,0b01111110);  // Clear flag
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;   RF_Command(0b11100010);     //Flush RX
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;}
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;void main(void)
; 0000 000B {
;PCODE: $000002C4 VOL: 0
; 0000 000C init();
;PCODE: $000002C5 VOL: 0
; 0000 000D start_servo();
;PCODE: $000002C6 VOL: 0
; 0000 000E delay_ms(500);
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 000F //stop_servo();
; 0000 0010 RF_Init();
;PCODE: $000002C9 VOL: 0
; 0000 0011 RF_Config();
;PCODE: $000002CA VOL: 0
; 0000 0012 RX_Mode();
;PCODE: $000002CB VOL: 0
; 0000 0013 steering=16;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0014 while (1)
;PCODE: $000002CE VOL: 0
; 0000 0015     {
; 0000 0016      RX_Mode();
;PCODE: $000002CF VOL: 0
; 0000 0017      if(IRQ==0)
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0018         {
; 0000 0019             led=!led;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 001A             RF_RX_Read();
;PCODE: $000002DD VOL: 0
; 0000 001B                 if (receive.analog_l ==128)                                 {dung_yen();}
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 001C                 if (receive.analog_l >128)                                  {di_thang(receive.analog_l);}
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 001D                 if (receive.analog_l <128)                                  {di_lui(receive.analog_l);}
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 001E                 if (receive.analog_r ==128)                                 {steering=16;}
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 001F                 //------------------------------------
; 0000 0020                 if ((receive.analog_r >=128)&(receive.analog_r <=148))      {steering=17;}
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0021                 if ((receive.analog_r >=149)&(receive.analog_r <=170))      {steering=18;}
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0022                 if ((receive.analog_r >=171)&(receive.analog_r <=190))      {steering=19;}
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0023                 if ((receive.analog_r >=191)&(receive.analog_r <=210))      {steering=20;}
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 0024                 if ((receive.analog_r >=211)&(receive.analog_r <=230))      {steering=21;}
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0025                 if (receive.analog_r >=231)                                 {steering=22;}
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 0026                 //------------------------------------
; 0000 0027                 if ((receive.analog_r >=111)&(receive.analog_r <=127))      {steering=15;}
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 0028                 if ((receive.analog_r >=91)&(receive.analog_r <=110))       {steering=14;}
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0029                 if ((receive.analog_r >=71)&(receive.analog_r <=90))        {steering=13;}
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 002A                 if ((receive.analog_r >=51)&(receive.analog_r <=70))        {steering=12;}
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 002B                 if ((receive.analog_r >=21)&(receive.analog_r <=50))        {steering=11;}
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 002C                 if (receive.analog_r <=20)                                  {steering=10;}
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 002D                 if (receive.digital_r ==1)                                  {ban();}
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 002E         }
;PCODE: $00000395 VOL: 0
; 0000 002F 
; 0000 0030 }
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 0031 }
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
